#include "Adafruit_FramebufferDisplay.h"

// not needed in your sketch, it is just an example display class:
#include "Adafruit_myDisplay.h" 

// Adafruit Display Buffer 48x16x1 with horizontal/row byte arrangement
Adafruit_FramebufferDisplayH dispH = Adafruit_FramebufferDisplayH(48,16);

// Adafruit Display Buffer 48x16x1 with vertical/column byte arrangement
Adafruit_FramebufferDisplayV dispV = Adafruit_FramebufferDisplayV(48,16);

// Custom display class based on Adafruit_FramebufferDisplayH
Adafruit_myDisplay dispM = Adafruit_myDisplay();

// Raw data can be accessed via disp.buffer which size is disp.bufferSize.
// The data can be written to an actual hardware display to display the
// image. You may implement disp.display() to do that.
// Requires Adafruit GFX Library to be installed:
// https://github.com/adafruit/Adafruit-GFX-Library

void setup() {
  // Start Serial for debug/test output of framebuffer
  Serial.begin(115200);

  // Write to the first two bytes of the framebuffer to visualize byte 
  // arrangement later
  dispH.buffer[0] = 0x0F;
  dispH.buffer[1] = 0x03;
  // Print and draw some stuff via standard Adafruit GFX functions
  dispH.setCursor(4,2);
  dispH.print("BytesH");
  dispH.drawCircle(47,15,5,1); // x,y,r,col
  dispH.drawRect(4,11,35,2,1); // y,x,w,h,col
  // Output the framebuffer via Serial
  dispH.displaySerial();

  // Same for vertical/column framebuffer
  dispV.buffer[0] = 0x0F;
  dispV.buffer[1] = 0x03;
  dispV.setCursor(4,2);
  dispV.print("BytesV");
  dispV.drawCircle(47,15,5,1); // x,y,r,col
  dispV.drawRect(4,11,35,2,1); // y,x,w,h,col
  dispV.displaySerial();

  // custom display
  dispM.print("M");
  dispM.displaySerial();
  dispM.display(); // this would actually output the data on a real display
 
}

/*

Serial Output:
--------------
Horizontal byte arrangement:
####....##...................................... 
................................................ 
....####..........#...............#...#......... 
....#...#.........#...............#...#......... 
....#...#.#...#.#####..###...####.#...#......... 
....####..#...#...#...#...#.#.....#####......... 
....#...#..####...#...#####..###..#...#......... 
....#...#.....#...#.#.#.........#.#...#......... 
....####..#...#....#...###..####..#...#......... 
...........###.................................. 
.............................................### 
....###################################.....#... 
....###################################....#.... 
..........................................#..... 
..........................................#..... 
..........................................#..... 

Vertical byte arrangement:
##.............................................. 
##.............................................. 
#...####..........#...............#...#......... 
#...#...#.........#...............#...#......... 
....#...#.#...#.#####..###...####.#...#......... 
....####..#...#...#...#...#.#.....#...#......... 
....#...#..####...#...#####..###..#...#......... 
....#...#.....#...#.#.#.........#..#.#.......... 
....####..#...#....#...###..####....#........... 
...........###.................................. 
.............................................### 
....###################################.....#... 
....###################################....#.... 
..........................................#..... 
..........................................#..... 
..........................................#..... 

Custom display:
#...#... 
##.##... 
#.#.#... 
#.#.#... 
#.#.#... 
#...#... 
#...#... 
........ 

 
*/

void loop() {
  // we're done
}
